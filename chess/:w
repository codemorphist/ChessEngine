from time import time
from copy import deepcopy

from chess import *
from graphic import draw_board

PAWN_C = [  0,  0,  0,  0,  0,  0,  0,  0,
            50, 50, 50, 50, 50, 50, 50, 50,
            10, 10, 20, 30, 30, 20, 10, 10,
            5,  5, 10, 25, 25, 10,  5,  5,
            0,  0,  0, 20, 20,  0,  0,  0,
            5, -5,-10,  0,  0,-10, -5,  5,
            5, 10, 10,-20,-20, 10, 10,  5,
            0,  0,  0,  0,  0,  0,  0,  0]

KNIGHT_C = [-50,-40,-30,-30,-30,-30,-40,-50,
            -40,-20,  0,  0,  0,  0,-20,-40,
            -30,  0, 10, 15, 15, 10,  0,-30,
            -30,  5, 15, 20, 20, 15,  5,-30,
            -30,  0, 15, 20, 20, 15,  0,-30,
            -30,  5, 10, 15, 15, 10,  5,-30,
            -40,-20,  0,  5,  5,  0,-20,-40,
            -50,-40,-30,-30,-30,-30,-40,-50]

BISHOP_C = [-20,-10,-10,-10,-10,-10,-10,-20,
            -10,  0,  0,  0,  0,  0,  0,-10,
            -10,  0,  5, 10, 10,  5,  0,-10,
            -10,  5,  5, 10, 10,  5,  5,-10,
            -10,  0, 10, 10, 10, 10,  0,-10,
            -10, 10, 10, 10, 10, 10, 10,-10,
            -10,  5,  0,  0,  0,  0,  5,-10,
            -20,-10,-10,-10,-10,-10,-10,-20]

ROOK_C = [  0,  0,  0,  0,  0,  0,  0,  0,
            5, 10, 10, 10, 10, 10, 10,  5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
             0,  0,  0,  5,  5,  0,  0,  0]

QUEEN_C = [ -20,-10,-10, -5, -5,-10,-10,-20,
            -10,  0,  0,  0,  0,  0,  0,-10,
            -10,  0,  5,  5,  5,  5,  0,-10,
            -5,  0,  5,  5,  5,  5,  0, -5,
             0,  0,  5,  5,  5,  5,  0, -5,
            -10,  5,  5,  5,  5,  5,  0,-10,
            -10,  0,  5,  0,  0,  0,  0,-10,
            -20,-10,-10, -5, -5,-10,-10,-20]

KING_C = [-20,-10,-10, -5, -5,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5,  5,  5,  5,  0,-10,
        -5,  0,  5,  5,  5,  5,  0, -5,
        0,  0,  5,  5,  5,  5,  0, -5,
        -10,  5,  5,  5,  5,  5,  0,-10,
        -10,  0,  5,  0,  0,  0,  0,-10,
        -20,-10,-10, -5, -5,-10,-10,-20]


def evaulate(chess: Chess) -> int:
    points = 0

    sign = 1 if chess._turn == Color.WHITE else -1


    for y, row in enumerate(chess.board):
        for x, piece in enumerate(row):
            if piece == " ":
                continue
            sign = 1 if piece.isupper() else -1
            index = 8*y + x
            if sign != 1:
                index = (7-y)*8 + x

            match piece.lower():
                case "p":
                    points += sign * 10 # + PAWN_C[index]
                case "n":
                    points += sign * 30 # + KNIGHT_C[index]
                case "b":
                    points += sign * 30 # + KNIGHT_C[index]
                case "r":
                    points += sign * 50 # + ROOK_C[index]
                case "q":
                    points += sign * 90 # + QUEEN_C[index]
                case "k":
                    points += sign * 900 # + KING_C[index]
    return points


def minimax(chess: Chess, a: int, b: int, maximizing_player, depth):
    if depth == 0:
        return -evaulate(chess)

    best_move = None
    if maximizing_player:
        best_move = -9999
    else:
        best_move = 9999

    for move in chess._moves():
        ch = deepcopy(chess)
        ch._move(move)
        if maximizing_player:
            best_move = max(best_move, minimax(ch, a, b, not maximizing_player, depth-1))
            a = max(a, best_move)
            if b <= a:
                return best_move
        else:
            best_move = min(best_move, minimax(ch, a, b, not maximizing_player, depth-1))
            b = min(b, best_move)
            if b <= a:
                return best_move
    return best_move


def minimax_root(chess: Chess, maximizing_player=True, depth=2):
    best_move_found: Move = None
    best_move: float = -9999

    for move in chess._moves():
        chess._move(move)
        value = minimax(ch, -10000, 10000, not maximizing_player, depth-1)
        chess.undo()
        if value >= best_move:
            best_move_found = move
            best_move = value

    return best_move_found


def calc(chess: Chess, max_depth=2) -> Move:
    if chess.is_checkmate() or chess.is_statemate():
        return None

    return minimax_root(chess, False, depth=max_depth)


if __name__ == "__main__":
    fen = "k7/3Q4/8/1Q6/8/8/8/5K2 w - - 0 1"
    chess = Chess(fen)

    while True:
        draw_board(chess)
        mat = chess.is_checkmate()
        draw = chess.is_statemate()
        if mat:
            print("CHECKMATE!")
            break
        if draw:
            print("DRAW...")
            break
        m = calc(chess, max_depth=3)
        chess._move(m)
        print(m)

    for m, _ in chess._history:
        print(m)



